<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>汇编基础-菜鸟的入门之路</title>
      <link href="/2022/02/23/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80-%E8%8F%9C%E9%B8%9F%E7%9A%84%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF/"/>
      <url>/2022/02/23/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80-%E8%8F%9C%E9%B8%9F%E7%9A%84%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>​初学汇编，本篇文章的内容主要包含一些基础的汇编知识以及个人的见解，难免会有出错的地方，望各位师傅多多包涵。</p><h2 id="一-进制和进制运算"><a class="markdownIt-Anchor" href="#一-进制和进制运算">#</a> 一、进制和进制运算</h2><p>​1. 每一种进制都是完美的，想要学好进制首先要忘掉十进制，也要忘掉进制之间的转化。<br>​2. 进制的定义：<br>​（1）八进制：由八个符号组成，分别是 01234567，逢八进一。<br>​（2）十进制：由十个符号组成，分别是 0123456789，逢十进一。<br>​（3）N 进制：由 N 个符号组成，逢 N 进一。<br>​3. 进制的运算<br>​进制的运算的本质就是查数。<br>​十进制运算用十进制运算表，那八进制就用八进制的运算表。<br>​每一种进制自身都是一个完整的体系，可以直接做各种运算。</p><h2 id="二-二进制简写形式"><a class="markdownIt-Anchor" href="#二-二进制简写形式">#</a> 二、二进制简写形式</h2><p>​1. 计算机为什么要使用二进制<br>​（1）计算机是需要用电的，电路只有两种状态：<br>​                               1      真（通电）<br>​                               0      假（未通电）<br>​          计算机中存储的任何文件，接收的任何指令，都是由 0 和 1 组成的。<br>​（2）16 进制在计算机中可以看成二进制的简写形式</p><p>​二进制         十六进制                   二进制                  十六进制</p><p>​0000             0                             1001                        9</p><p>​0001             1                             1010                        A</p><p>​0010             2                             1011                        B</p><p>​0011             3                              1100                       C</p><p>​0100             4                              1101                       D</p><p>​0101             5                              1110                       E</p><p>​0110             6                               1111                       F</p><p>​0111              7</p><p>​1000             8<br>​这些转换是需要记住的，对以后的学习会有很大的帮助</p><h2 id="三-数据宽度"><a class="markdownIt-Anchor" href="#三-数据宽度">#</a> 三、数据宽度</h2><p>​数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的限制，数据都是有长度限制的，我们称之为数据宽度，超过最多宽度的数据会被丢掉。</p><p>​在计算机中常见的数据宽度：<br>​首先就是位（bit），然后是字节（byte），1 字节 = 8 位，再者就是字（word），1 字 = 16 位，双字（Doubleword）=32 位。</p><p>​存储范围<br>​在计算机中，每个位能存一个 0 或 1，另外，在二进制中四位 1 等于十六进制中的一个 F，那么我们就能根据这些能够知道每个宽度所能存储的范围，<br>​字节：0~0xFF<br>​字：0~0xFFFF<br>​双字：0~0xFFFFFFFF</p><h2 id="四-有符号数和无符号数"><a class="markdownIt-Anchor" href="#四-有符号数和无符号数">#</a> 四、有符号数和无符号数</h2><p>​在计算机中，所有东西都是用二进制的 0 和 1 来进行存储的，比如说一个逗号、一个程序、一个有符号数，一个无符号数等等，都是用 0 和 1 进行存储的。所以在进行编码的时候，会按照相应的编码规则进行编码，有符号数按有符号数的编码规则，无符号数按无符号数的编码规则，所以说给你一串数字：1 0 0 1 1 1 0 1 0，告诉你他是个文本，那么他可能就代表 0 一个逗号。不谈这个文本，如果它是一个无符号数，我们就需要按照无符号数的编码规则去进行编码，既然是无符号，顾名思义，可以直接转换成十六进制数，或者是十进制数，转换成 16 进制就是 0x9A   十进制就是 154。<br>​但如果是有符号数的话，因为是有正数和负数之分的，所以编码规则相对不同，即正数和负数的编码不同。<br>​有符号数，拿上面的一串数字来说：0 0 0 1 1 0 1 0，最高位是 1，这个数就是负数，最高数是 0，这个数就是正数，那么很显然这个是正数。至于有、无符号数是怎么进行编码的，就需要了解到原码、补码和反码了。</p><h2 id="五-原码-补码和反码"><a class="markdownIt-Anchor" href="#五-原码-补码和反码">#</a> 五、原码、补码和反码</h2><p>​1. 编码规则<br>​首先在计算机中，靠二进制数 0 和 1 存储信息，例如 0 1 0 1 0 1 0 1，不同的文件有着不同的编码规则，也就是说这些 0 和 1 按照编码规则，解析成文本，视频，音乐等等。</p><p>​2. 原码、反码和补码<br>​原码：最高位为符号位，其余各位为数值本身的绝对值</p><p>​反码：<br>​正数：反码与原码相同<br>​负数：符号位为 1，其余位对原码取反</p><p>​补码：<br>​正数：补码与原码相同<br>​负数：符号位为 1，其余位对原码取反加 1</p><p>​了解到原码、反码和补码之后，我们也就能够轻松地理解有、无符号数是怎样进行编码的了。</p><h2 id="六-计算机做的运算"><a class="markdownIt-Anchor" href="#六-计算机做的运算">#</a> 六、计算机做的运算</h2><p>​1. 与运算（and&amp;）<br>​       两个位都为 1 时，结果才为 1</p><p>​2. 或运算（or|）<br>​      只要有一个为 1 就是 1</p><p>​3. 异或运算（xor^）<br>不一样的时候是 1</p><p>​4. 非运算（not~）<br>​      0 就是 1    1 就是 0</p><p>​5. 移位运算<br>​左移（shl &lt;&lt;）<br>​各二进位全部左移若干位，高位丢弃，低位补 0<br>​eg：1101 1000    左移 2 位为：0110 0000</p><p>​右移（shr    sar    &gt;&gt;）<br>​各二进位全部右移若干位，低位丢弃，高位补 0 或者补符号位<br>​注：右移是分两种情况的，就是高位补 0 和补符号位</p><p>​shr   1101 0101        右移    0011 0101<br>​对应 C 语言（&gt;&gt;）<br>​unsigned int a= 10；<br>​printf(&quot;%d\n&quot;,a&gt;&gt;2);</p><p>​sar   1101 0101        右移    1111 0101<br>​对应 C 语言（&gt;&gt;）<br>​int a=10;<br>​printf(&quot;%d\n&quot;,a&gt;&gt;2):</p><p>​C 语言中，有符号的右移是补符号位，无符号位的右移是补 0。上述字母代表的是汇编中对应的指令，符号代表的是 C 语言中对应的指令。所以说计算机做的所有运算归根到底都是位运算。</p><h2 id="七-位运算加减乘除用位运算来实现四则运算"><a class="markdownIt-Anchor" href="#七-位运算加减乘除用位运算来实现四则运算">#</a> 七、位运算加减乘除（用位运算来实现四则运算）</h2><p>​不考虑进位的情况下，异或的结果和加结果一样。所以计算机在进行加法的时候的大致过程是这样的：<br>​举个例子：4+5=？<br>​（1）首先，两个二进制数进行异或<br>​0000  0100<br>​0000  0101   异或<br>​————————<br>​0000  0001<br>​（2）其次，两个数进行与运算<br>​0000  0100<br>​0000  0101   与<br>​————————<br>​0000  0100<br>​（3）因为与运算是计算机能够判断在进行加法时是否发生了进位的运算，所如果发生了进位，那么就会再次进行异或运算，如果没有进位，第一次进行的异或运算的结果就是真实的结果，以下是发生了进位之后的异或运算<br>​0000 0001                 —&gt; 第一次异或的结果<br>​0000 1000   异或        —&gt; 上次与运算的结果左移一位之后<br>​————————<br>​0000  1001<br>​（4）再次进行与运算，判断上次异或是否发生进位，没有进位，直接出结果，进位了，继续进行异或运算<br>​0000  0001<br>​0000  1000     与<br>​————————<br>​0000  0000</p><p>​注：（1）与运算结果有 1 的地方就是发生了进位，如果没有发生进位，那么结果就应该全部为 0<br>​      （2）第二次异或之所以要加左移一位的结果是因为与运算结果为 1 的地方本应该是要进一位的</p><p>​其他运算的运算过程<br>​4-5=4+（-5）<br>​减法就是加法，所以运算的过程和加法基本是一致的，<br>​至于乘法，乘法就是加法，x*y 的本质就是 x 个 y 相加，<br>​除法的本质就是减法，X/Y 其实就是 X 能减去多少个 Y，<br>​归根结底，四则运算就是加法的运算，用计算机的位运算进行运算，本质都是一样的。<br>​所以说计算机可以通过位运算来进行最基本的四则运算，那么也就可以以此进行一些更复杂的运算。</p><h2 id="八-汇编环境搭建"><a class="markdownIt-Anchor" href="#八-汇编环境搭建">#</a> 八、汇编环境搭建</h2><p>​汇编环境搭建<br>​1. 学汇编不是为了写代码<br>​学汇编对学习应用开发和安全相关方面都有帮助<br>​2. 环境配置<br>​下载 DTDebug，在滴水官网下载，下载完成之后进行简单配置，在 options—&gt;Appearance—&gt;Directories 中，将 UDD 和 Plugin 的路径指向对应名称的目录中。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 菜鸟入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈博客搭建</title>
      <link href="/2022/02/18/%E6%B5%85%E8%B0%88%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/02/18/%E6%B5%85%E8%B0%88%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>第一次接触博客，不知道说啥，好紧张。<br>年前花了几天时间在网上找课程，搭建最基础的博客，然后就是漫长的主题美化，中间一直耽搁着，直到今天才顺利的把主题美化好，各种该有的全部添了上去，不该有的也弄了个七七八八。<br>我用的是 butterfly 主题，当时满世界的找主题，唯有这款主题深深的吸引了我，但是这个主题对于新手十分的不友好，我差点就删档重新来过，好在经历了各种错误之后，还是将美化给做完了。<br>还有就是我要开始写博客了，学习怎样写博客，也不失为一种乐趣，这也是最最基本的事情了。就目前看来，Sublime Text 确实用的不是很习惯。<br>不说了，我要去下载 Typora 了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 浅谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/13/hello-world/"/>
      <url>/2022/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
